{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anon/Documents/VSCode/dapper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/anon/Documents/VSCode/dapper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/anon/Documents/VSCode/dapper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/anon/Documents/VSCode/dapper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/anon/Documents/VSCode/dapper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Support regenerator-runtime globally.\nimport \"regenerator-runtime/runtime.js\";\nimport Base64 from \"./core/base64.js\";\nimport Converter from \"./core/converter.js\";\nimport File from \"./core/file.js\";\nimport Image from \"./core/image.js\";\nimport Photo from \"./core/photo.js\";\nimport Rotate from \"./core/rotate.js\"; // Supported input formats\n// image/png, image/jpeg, image/jpg, image/gif, image/bmp, image/tiff, image/x-icon,  image/svg+xml, image/webp, image/xxx\n// image/png, image/jpeg, image/webp\n\nvar Compress = /*#__PURE__*/function () {\n  function Compress() {\n    _classCallCheck(this, Compress);\n  }\n\n  _createClass(Compress, [{\n    key: \"attach\",\n    value: function attach(el, options) {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        var input = document.querySelector(el);\n        input.setAttribute(\"accept\", \"image/*\");\n        input.addEventListener(\"change\", function (evt) {\n          var output = _this.compress(_toConsumableArray(evt.target.files), options);\n\n          resolve(output);\n        }, false);\n      });\n    }\n  }, {\n    key: \"compress\",\n    value: function compress(files, options) {\n      return Promise.all(files.map(function (file) {\n        return compressFile(file, options);\n      }));\n    }\n  }], [{\n    key: \"convertBase64ToFile\",\n    value: function convertBase64ToFile(base64, mime) {\n      return Converter.base64ToFile(base64, mime);\n    }\n  }]);\n\n  return Compress;\n}();\n\nexport { Compress as default };\n\nfunction loopCompression(canvas, size) {\n  var quality = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var targetSize = arguments.length > 3 ? arguments[3] : undefined;\n  var targetQuality = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var iterations = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  var base64str = Converter.canvasToBase64(canvas, quality);\n  var newSize = Base64.size(base64str);\n  return newSize > targetSize || quality > targetQuality ? loopCompression(canvas, newSize, quality - 0.1, targetSize, targetQuality, iterations + 1) : base64str;\n}\n\nfunction compressFile(_x, _x2) {\n  return _compressFile.apply(this, arguments);\n}\n\nfunction _compressFile() {\n  _compressFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(file, options) {\n    var photo;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // Create a new photo object\n            photo = new Photo(options);\n            photo.start = window.performance.now();\n            photo.alt = file.name;\n            photo.ext = file.type;\n            photo.startSize = file.size;\n\n            if (!photo.rotate) {\n              _context2.next = 11;\n              break;\n            }\n\n            _context2.next = 8;\n            return Rotate.orientation(file);\n\n          case 8:\n            _context2.t0 = _context2.sent;\n            _context2.next = 12;\n            break;\n\n          case 11:\n            _context2.t0 = 0;\n\n          case 12:\n            photo.orientation = _context2.t0;\n            _context2.t1 = compressImage(photo);\n            _context2.next = 16;\n            return File.load(file);\n\n          case 16:\n            _context2.t2 = _context2.sent;\n            return _context2.abrupt(\"return\", (0, _context2.t1)(_context2.t2));\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _compressFile.apply(this, arguments);\n}\n\nfunction compressImage(photo) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(src) {\n      var img, _Image$resize, width, height, canvas, base64, difference;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return Image.load(src);\n\n            case 2:\n              img = _context.sent;\n              // Store the initial dimensions\n              photo.startWidth = img.naturalWidth;\n              photo.startHeight = img.naturalHeight; // Resize the image\n\n              if (photo.resize) {\n                _Image$resize = Image.resize(photo.maxWidth, photo.maxHeight)(img.naturalWidth, img.naturalHeight), width = _Image$resize.width, height = _Image$resize.height;\n                photo.endWidth = width;\n                photo.endHeight = height;\n              } else {\n                photo.endWidth = img.naturalWidth;\n                photo.endHeight = img.naturalHeight;\n              }\n\n              canvas = Converter.imageToCanvas(photo.endWidth, photo.endHeight, photo.orientation)(img);\n              photo.iterations = 1;\n              photo.base64prefix = Base64.prefix(photo.ext);\n              _context.next = 11;\n              return loopCompression(canvas, photo.startSize, photo.quality, photo.size, photo.minQuality, photo.iterations);\n\n            case 11:\n              base64 = _context.sent;\n              photo.finalSize = Base64.size(base64);\n              photo.end = window.performance.now();\n              difference = photo.end - photo.start; // in ms\n\n              return _context.abrupt(\"return\", {\n                data: Base64.data(base64),\n                prefix: photo.base64prefix,\n                elapsedTimeInSeconds: difference / 1000,\n                // in seconds\n                alt: photo.alt,\n                initialSizeInMb: Converter.size(photo.startSize).MB,\n                endSizeInMb: Converter.size(photo.finalSize).MB,\n                ext: photo.ext,\n                quality: photo.quality,\n                endWidthInPx: photo.endWidth,\n                endHeightInPx: photo.endHeight,\n                initialWidthInPx: photo.startWidth,\n                initialHeightInPx: photo.startHeight,\n                sizeReducedInPercent: (photo.startSize - photo.finalSize) / photo.startSize * 100,\n                iterations: photo.iterations\n              });\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}","map":null,"metadata":{},"sourceType":"module"}