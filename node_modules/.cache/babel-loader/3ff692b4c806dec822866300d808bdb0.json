{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/Users/anon/Documents/VSCode/dapper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _asyncToGenerator = require(\"/Users/anon/Documents/VSCode/dapper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _regeneratorRuntime = require(\"/Users/anon/Documents/VSCode/dapper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncIterator = require(\"/Users/anon/Documents/VSCode/dapper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar fromString = require('uint8arrays/from-string');\n\nvar toString = require('uint8arrays/to-string');\n\nvar debug = require('debug');\n\nvar configure = require('../lib/configure.js');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nvar log = debug__default['default']('ipfs-http-client:pubsub:subscribe');\n\nvar createSubscribe = function createSubscribe(options, subsTracker) {\n  return configure.configure(function (api) {\n    function subscribe(_x, _x2) {\n      return _subscribe.apply(this, arguments);\n    }\n\n    function _subscribe() {\n      _subscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(topic, handler) {\n        var options,\n            done,\n            fail,\n            result,\n            ffWorkaround,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n                options.signal = subsTracker.subscribe(topic, handler, options.signal);\n                result = new Promise(function (resolve, reject) {\n                  done = resolve;\n                  fail = reject;\n                });\n                ffWorkaround = setTimeout(function () {\n                  return done();\n                }, 1000);\n                api.post('pubsub/sub', {\n                  signal: options.signal,\n                  searchParams: toUrlSearchParams.toUrlSearchParams(_objectSpread({\n                    arg: topic\n                  }, options)),\n                  headers: options.headers\n                }).catch(function (err) {\n                  subsTracker.unsubscribe(topic, handler);\n                  fail(err);\n                }).then(function (response) {\n                  clearTimeout(ffWorkaround);\n\n                  if (!response) {\n                    return;\n                  }\n\n                  readMessages(response, {\n                    onMessage: handler,\n                    onEnd: function onEnd() {\n                      return subsTracker.unsubscribe(topic, handler);\n                    },\n                    onError: options.onError\n                  });\n                  done();\n                });\n                return _context2.abrupt(\"return\", result);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _subscribe.apply(this, arguments);\n    }\n\n    return subscribe;\n  })(options);\n};\n\nfunction readMessages(response, _ref) {\n  var onMessage = _ref.onMessage,\n      onEnd = _ref.onEnd,\n      onError = _ref.onError;\n\n  var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, msg;\n\n  return _regeneratorRuntime.async(function readMessages$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          onError = onError || log;\n          _context.prev = 1;\n          _iteratorAbruptCompletion = false;\n          _didIteratorError = false;\n          _context.prev = 4;\n          _iterator = _asyncIterator(response.ndjson());\n\n        case 6:\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(_iterator.next());\n\n        case 8:\n          if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n            _context.next = 23;\n            break;\n          }\n\n          msg = _step.value;\n          _context.prev = 10;\n\n          if (msg.from) {\n            _context.next = 13;\n            break;\n          }\n\n          return _context.abrupt(\"continue\", 20);\n\n        case 13:\n          onMessage({\n            from: toString.toString(fromString.fromString(msg.from, 'base64pad'), 'base58btc'),\n            data: fromString.fromString(msg.data, 'base64pad'),\n            seqno: fromString.fromString(msg.seqno, 'base64pad'),\n            topicIDs: msg.topicIDs\n          });\n          _context.next = 20;\n          break;\n\n        case 16:\n          _context.prev = 16;\n          _context.t0 = _context[\"catch\"](10);\n          _context.t0.message = \"Failed to parse pubsub message: \".concat(_context.t0.message);\n          onError(_context.t0, false, msg);\n\n        case 20:\n          _iteratorAbruptCompletion = false;\n          _context.next = 6;\n          break;\n\n        case 23:\n          _context.next = 29;\n          break;\n\n        case 25:\n          _context.prev = 25;\n          _context.t1 = _context[\"catch\"](4);\n          _didIteratorError = true;\n          _iteratorError = _context.t1;\n\n        case 29:\n          _context.prev = 29;\n          _context.prev = 30;\n\n          if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n            _context.next = 34;\n            break;\n          }\n\n          _context.next = 34;\n          return _regeneratorRuntime.awrap(_iterator.return());\n\n        case 34:\n          _context.prev = 34;\n\n          if (!_didIteratorError) {\n            _context.next = 37;\n            break;\n          }\n\n          throw _iteratorError;\n\n        case 37:\n          return _context.finish(34);\n\n        case 38:\n          return _context.finish(29);\n\n        case 39:\n          _context.next = 44;\n          break;\n\n        case 41:\n          _context.prev = 41;\n          _context.t2 = _context[\"catch\"](1);\n\n          if (!isAbortError(_context.t2)) {\n            onError(_context.t2, true);\n          }\n\n        case 44:\n          _context.prev = 44;\n          onEnd();\n          return _context.finish(44);\n\n        case 47:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 41, 44, 47], [4, 25, 29, 39], [10, 16], [30,, 34, 38]], Promise);\n}\n\nvar isAbortError = function isAbortError(error) {\n  switch (error.type) {\n    case 'aborted':\n      return true;\n\n    case 'abort':\n      return true;\n\n    default:\n      return error.name === 'AbortError';\n  }\n};\n\nexports.createSubscribe = createSubscribe;","map":null,"metadata":{},"sourceType":"script"}