{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/anon/Documents/VSCode/dapper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncIterator = require(\"/Users/anon/Documents/VSCode/dapper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar normaliseInput_browser = require('./files/normalise-input.browser.js');\n\nvar modeToString = require('./mode-to-string.js');\n\nfunction multipartRequest(source, abortController) {\n  var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var parts, formData, index, total, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, content, path, mode, mtime, fileSuffix, type, fieldName, qs, secs, nsecs, end;\n\n  return _regeneratorRuntime.async(function multipartRequest$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          parts = [];\n          formData = new FormData();\n          index = 0;\n          total = 0;\n          _iteratorAbruptCompletion = false;\n          _didIteratorError = false;\n          _context.prev = 6;\n          _iterator = _asyncIterator(normaliseInput_browser.normaliseInput(source));\n\n        case 8:\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(_iterator.next());\n\n        case 10:\n          if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n            _context.next = 36;\n            break;\n          }\n\n          _step$value = _step.value, content = _step$value.content, path = _step$value.path, mode = _step$value.mode, mtime = _step$value.mtime;\n          fileSuffix = '';\n          type = content ? 'file' : 'dir';\n\n          if (index > 0) {\n            fileSuffix = \"-\".concat(index);\n          }\n\n          fieldName = type + fileSuffix;\n          qs = [];\n\n          if (mode !== null && mode !== undefined) {\n            qs.push(\"mode=\".concat(modeToString.modeToString(mode)));\n          }\n\n          if (mtime != null) {\n            secs = mtime.secs, nsecs = mtime.nsecs;\n            qs.push(\"mtime=\".concat(secs));\n\n            if (nsecs != null) {\n              qs.push(\"mtime-nsecs=\".concat(nsecs));\n            }\n          }\n\n          if (qs.length) {\n            fieldName = \"\".concat(fieldName, \"?\").concat(qs.join('&'));\n          }\n\n          if (!content) {\n            _context.next = 27;\n            break;\n          }\n\n          formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined);\n          end = total + content.size;\n          parts.push({\n            name: path,\n            start: total,\n            end: end\n          });\n          total = end;\n          _context.next = 32;\n          break;\n\n        case 27:\n          if (!(path != null)) {\n            _context.next = 31;\n            break;\n          }\n\n          formData.set(fieldName, new File([''], encodeURIComponent(path), {\n            type: 'application/x-directory'\n          }));\n          _context.next = 32;\n          break;\n\n        case 31:\n          throw new Error('path or content or both must be set');\n\n        case 32:\n          index++;\n\n        case 33:\n          _iteratorAbruptCompletion = false;\n          _context.next = 8;\n          break;\n\n        case 36:\n          _context.next = 42;\n          break;\n\n        case 38:\n          _context.prev = 38;\n          _context.t0 = _context[\"catch\"](6);\n          _didIteratorError = true;\n          _iteratorError = _context.t0;\n\n        case 42:\n          _context.prev = 42;\n          _context.prev = 43;\n\n          if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n            _context.next = 47;\n            break;\n          }\n\n          _context.next = 47;\n          return _regeneratorRuntime.awrap(_iterator.return());\n\n        case 47:\n          _context.prev = 47;\n\n          if (!_didIteratorError) {\n            _context.next = 50;\n            break;\n          }\n\n          throw _iteratorError;\n\n        case 50:\n          return _context.finish(47);\n\n        case 51:\n          return _context.finish(42);\n\n        case 52:\n          return _context.abrupt(\"return\", {\n            total: total,\n            parts: parts,\n            headers: headers,\n            body: formData\n          });\n\n        case 53:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[6, 38, 42, 52], [43,, 47, 51]], Promise);\n}\n\nexports.multipartRequest = multipartRequest;","map":null,"metadata":{},"sourceType":"script"}