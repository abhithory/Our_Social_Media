{"ast":null,"code":"var base64ToFile = function base64ToFile(base64) {\n  var mime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"image/jpeg\";\n  var byteString = window.atob(base64);\n  var content = [];\n\n  for (var i = 0; i < byteString.length; i++) {\n    content[i] = byteString.charCodeAt(i);\n  }\n\n  return new window.Blob([new Uint8Array(content)], {\n    type: mime\n  });\n};\n\nvar imageToCanvas = function imageToCanvas(width, height, orientation) {\n  var canvas = document.createElement(\"canvas\");\n  var context = canvas.getContext(\"2d\");\n  canvas.width = width;\n  canvas.height = height;\n  return function (image) {\n    if (!orientation || orientation > 8) {\n      context.drawImage(image, 0, 0, canvas.width, canvas.height);\n      return canvas;\n    }\n\n    if (orientation > 4) {\n      canvas.width = height;\n      canvas.height = width;\n    }\n\n    switch (orientation) {\n      case 2:\n        // horizontal flip\n        context.translate(width, 0);\n        context.scale(-1, 1);\n        break;\n\n      case 3:\n        // 180° rotate left\n        context.translate(width, height);\n        context.rotate(Math.PI);\n        break;\n\n      case 4:\n        // vertical flip\n        context.translate(0, height);\n        context.scale(1, -1);\n        break;\n\n      case 5:\n        // vertical flip + 90 rotate right\n        context.rotate(0.5 * Math.PI);\n        context.scale(1, -1);\n        break;\n\n      case 6:\n        // 90° rotate right\n        context.rotate(0.5 * Math.PI);\n        context.translate(0, -height);\n        break;\n\n      case 7:\n        // horizontal flip + 90 rotate right\n        context.rotate(0.5 * Math.PI);\n        context.translate(width, -height);\n        context.scale(-1, 1);\n        break;\n\n      case 8:\n        // 90° rotate left\n        context.rotate(-0.5 * Math.PI);\n        context.translate(-width, 0);\n        break;\n    }\n\n    if (orientation > 4) {\n      context.drawImage(image, 0, 0, canvas.height, canvas.width);\n    } else {\n      context.drawImage(image, 0, 0, canvas.width, canvas.height);\n    }\n\n    return canvas;\n  };\n};\n\nvar canvasToBase64 = function canvasToBase64(canvas) {\n  var quality = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.75;\n  // in order to compress the final image format has to be jpeg\n  var base64 = canvas.toDataURL(\"image/jpeg\", quality);\n  return base64;\n};\n\nvar size = function size(_size) {\n  return {\n    KB: _size / 1000,\n    MB: _size / (1000 * 1000)\n  };\n};\n\nexport default {\n  base64ToFile: base64ToFile,\n  imageToCanvas: imageToCanvas,\n  canvasToBase64: canvasToBase64,\n  size: size\n};","map":null,"metadata":{},"sourceType":"module"}