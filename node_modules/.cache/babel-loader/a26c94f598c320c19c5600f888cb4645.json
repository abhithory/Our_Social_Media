{"ast":null,"code":"import _toConsumableArray from \"/Users/anon/Documents/VSCode/dapper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/anon/Documents/VSCode/dapper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/anon/Documents/VSCode/dapper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/anon/Documents/VSCode/dapper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/anon/Documents/VSCode/dapper/src/components/AllPostOfUser.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport OnePost from './OnePost';\nimport \"../css/OneChat.css\";\nimport { OSMcontext } from '../OSMcontext';\nexport default function AllPostOfUser(props) {\n  var _this = this;\n\n  var userid = props.userid;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      usertotalpostCount = _useState2[0],\n      setUsertotalpostCount = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      totalLoadedPostsCount = _useState4[0],\n      setTotalLoadedPostsCount = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoadingMorePost = _useState6[0],\n      setIsLoadingMorePost = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isAllPostLoaded = _useState8[0],\n      setIsAllPostLoaded = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      showLoadMoreButton = _useState10[0],\n      setShowLoadMoreButton = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      userPosts = _useState12[0],\n      setUserPosts = _useState12[1];\n\n  var _useContext = useContext(OSMcontext),\n      ourSocialMedia = _useContext.ourSocialMedia,\n      everyTimeLoadPostCount = _useContext.everyTimeLoadPostCount;\n\n  useEffect(function () {\n    setUserPosts([]);\n    loadAllPost();\n  }, [userid]);\n\n  var loadAllPost = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var usertotalpostCount0, postToLoad, posts0, i, postid, post;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return ourSocialMedia.methods.totalPostsCountOfUser(userid).call();\n\n            case 2:\n              usertotalpostCount0 = _context.sent;\n              console.log('aaaaaaaaaaaaa', usertotalpostCount0.toNumber());\n              _context.next = 6;\n              return setUsertotalpostCount(usertotalpostCount0.toNumber());\n\n            case 6:\n              if (!(usertotalpostCount0.toNumber() > 0)) {\n                _context.next = 23;\n                break;\n              }\n\n              if (usertotalpostCount0.toNumber() <= everyTimeLoadPostCount) {\n                postToLoad = 1;\n                setTotalLoadedPostsCount(usertotalpostCount);\n              } else {\n                postToLoad = usertotalpostCount0.toNumber() - (everyTimeLoadPostCount - 1);\n                setTotalLoadedPostsCount(everyTimeLoadPostCount);\n              }\n\n              posts0 = [];\n              i = usertotalpostCount0.toNumber();\n\n            case 10:\n              if (!(i >= postToLoad)) {\n                _context.next = 21;\n                break;\n              }\n\n              _context.next = 13;\n              return ourSocialMedia.methods.postsOf(userid, i - 1).call();\n\n            case 13:\n              postid = _context.sent;\n              _context.next = 16;\n              return ourSocialMedia.methods.allPosts(postid.toNumber()).call();\n\n            case 16:\n              post = _context.sent;\n              posts0.push(post);\n\n            case 18:\n              i--;\n              _context.next = 10;\n              break;\n\n            case 21:\n              setUserPosts(posts0);\n              setShowLoadMoreButton(true);\n\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function loadAllPost() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var loadMorePost = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var postToLoad, posts0, _loop, i;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(usertotalpostCount <= totalLoadedPostsCount)) {\n                _context3.next = 3;\n                break;\n              }\n\n              setIsAllPostLoaded(true);\n              return _context3.abrupt(\"return\");\n\n            case 3:\n              setIsLoadingMorePost(true);\n\n              if (usertotalpostCount <= everyTimeLoadPostCount + totalLoadedPostsCount) {\n                postToLoad = 1;\n              } else {\n                postToLoad = usertotalpostCount - (everyTimeLoadPostCount + totalLoadedPostsCount - 1);\n              }\n\n              posts0 = [];\n              _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                var postid, post;\n                return _regeneratorRuntime.wrap(function _loop$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _context2.next = 2;\n                        return ourSocialMedia.methods.postsOf(userid, i - 1).call();\n\n                      case 2:\n                        postid = _context2.sent;\n                        _context2.next = 5;\n                        return ourSocialMedia.methods.allPosts(postid.toNumber()).call();\n\n                      case 5:\n                        post = _context2.sent;\n                        posts0.push(post);\n                        setUserPosts(function (currentUserPost) {\n                          return [].concat(_toConsumableArray(currentUserPost), [post]);\n                        });\n\n                      case 8:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _loop);\n              });\n              i = usertotalpostCount - totalLoadedPostsCount;\n\n            case 8:\n              if (!(i >= postToLoad)) {\n                _context3.next = 13;\n                break;\n              }\n\n              return _context3.delegateYield(_loop(), \"t0\", 10);\n\n            case 10:\n              i--;\n              _context3.next = 8;\n              break;\n\n            case 13:\n              setTotalLoadedPostsCount(everyTimeLoadPostCount + totalLoadedPostsCount);\n              setIsLoadingMorePost(false);\n\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function loadMorePost() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, userPosts && userPosts.map(function (post, key) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-xl-4 col-lg-6 mb-4\",\n      key: key,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(OnePost, {\n      post: post,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 29\n      }\n    }));\n  }), userPosts && showLoadMoreButton && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-12 text-center mt-2 mb-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: loadMorePost,\n    disabled: isAllPostLoaded || isLoadingMorePost,\n    className: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }\n  }, isLoadingMorePost && /*#__PURE__*/React.createElement(\"span\", {\n    class: \"spinner-grow spinner-grow-sm\",\n    role: \"status\",\n    \"aria-hidden\": \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 150\n    }\n  }), isAllPostLoaded ? 'All Post Loaded' : 'Load More...')));\n}","map":{"version":3,"sources":["/Users/anon/Documents/VSCode/dapper/src/components/AllPostOfUser.js"],"names":["React","useContext","useEffect","useState","OnePost","OSMcontext","AllPostOfUser","props","userid","usertotalpostCount","setUsertotalpostCount","totalLoadedPostsCount","setTotalLoadedPostsCount","isLoadingMorePost","setIsLoadingMorePost","isAllPostLoaded","setIsAllPostLoaded","showLoadMoreButton","setShowLoadMoreButton","userPosts","setUserPosts","ourSocialMedia","everyTimeLoadPostCount","loadAllPost","methods","totalPostsCountOfUser","call","usertotalpostCount0","console","log","toNumber","postToLoad","posts0","i","postsOf","postid","allPosts","post","push","loadMorePost","currentUserPost","map","key"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport OnePost from './OnePost';\nimport \"../css/OneChat.css\"\nimport { OSMcontext } from '../OSMcontext';\n\n\nexport default function AllPostOfUser(props) {\n\n    const {userid} = props;\n\n    const [usertotalpostCount, setUsertotalpostCount] = useState();\n    const [totalLoadedPostsCount, setTotalLoadedPostsCount] = useState(0);\n    const [isLoadingMorePost, setIsLoadingMorePost] = useState(false);\n    const [isAllPostLoaded, setIsAllPostLoaded] = useState(false);\n    const [showLoadMoreButton, setShowLoadMoreButton] = useState(false);\n\n    const [userPosts, setUserPosts] = useState([]);\n\n\n    const { ourSocialMedia, everyTimeLoadPostCount } = useContext(OSMcontext);\n\n\n\n\n    useEffect(() => {\n        setUserPosts([])\n        loadAllPost();\n    }, [userid]);\n\n    const loadAllPost = async () => {\n        const usertotalpostCount0 = await ourSocialMedia.methods.totalPostsCountOfUser(userid).call();\n        console.log('aaaaaaaaaaaaa',usertotalpostCount0.toNumber())\n        await setUsertotalpostCount(usertotalpostCount0.toNumber());\n        \n        if(usertotalpostCount0.toNumber()>0){\n\n\n        let postToLoad;\n        if (usertotalpostCount0.toNumber() <= everyTimeLoadPostCount) {\n            postToLoad = 1;\n            setTotalLoadedPostsCount(usertotalpostCount);\n        } else {\n            postToLoad = usertotalpostCount0.toNumber() - (everyTimeLoadPostCount - 1);\n            setTotalLoadedPostsCount(everyTimeLoadPostCount);\n        }\n        let posts0 = []\n        for (var i = usertotalpostCount0.toNumber(); i >= postToLoad; i--) {\n            let postid = await ourSocialMedia.methods.postsOf(userid, i - 1).call()\n            let post = await ourSocialMedia.methods.allPosts(postid.toNumber()).call();\n            posts0.push(post);\n        }\n        setUserPosts(posts0);\n\n            setShowLoadMoreButton(true);\n        } \n    }\n    const loadMorePost = async () => {\n\n        if (usertotalpostCount <= totalLoadedPostsCount) {\n            setIsAllPostLoaded(true);\n            return;\n        }\n        setIsLoadingMorePost(true);\n\n        let postToLoad;\n\n        if (usertotalpostCount <= everyTimeLoadPostCount + totalLoadedPostsCount) {\n            postToLoad = 1;\n        } else {\n            postToLoad = usertotalpostCount - (everyTimeLoadPostCount + totalLoadedPostsCount - 1);\n        }\n\n        let posts0 = []\n        for (var i = usertotalpostCount - totalLoadedPostsCount; i >= postToLoad; i--) {\n            let postid = await ourSocialMedia.methods.postsOf(userid, i - 1).call()\n            let post = await ourSocialMedia.methods.allPosts(postid.toNumber()).call();\n            posts0.push(post);\n            setUserPosts(currentUserPost => [...currentUserPost,post] );\n        }\n        setTotalLoadedPostsCount(everyTimeLoadPostCount + totalLoadedPostsCount )\n        setIsLoadingMorePost(false);\n    }\n\n    return (\n        \n            <div className=\"row\">\n                {userPosts && userPosts.map((post, key) => {\n                    return (\n                        <div className=\"col-xl-4 col-lg-6 mb-4\" key={key} >\n                            <OnePost post={post} />\n                        </div>\n                    )\n                })}\n\n                {userPosts && \n                showLoadMoreButton &&\n                <div className=\"col-12 text-center mt-2 mb-5\">\n                    <button onClick={loadMorePost} disabled={isAllPostLoaded || isLoadingMorePost} className=\"btn btn-primary\">{isLoadingMorePost && <span class=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span>}\n                        {isAllPostLoaded ? 'All Post Loaded' : 'Load More...'}</button>\n                </div>\n                }\n                \n                </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}