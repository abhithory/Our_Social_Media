{"ast":null,"code":"import _regeneratorRuntime from \"/Users/anon/Documents/VSCode/dapper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/anon/Documents/VSCode/dapper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/anon/Documents/VSCode/dapper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/anon/Documents/VSCode/dapper/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/anon/Documents/VSCode/dapper/src/pages/CreatePost.js\";\nimport React, { useState } from 'react';\nimport Compress from 'compress.js';\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient.create({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\"\n});\nexport default function CreatePost(props) {\n  var createPost = props.createPost;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      imgToShow = _useState4[0],\n      SetImgToShow = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      imgBuffer = _useState6[0],\n      SetImgBuffer = _useState6[1];\n\n  var captureFile = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var files, compress;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n              files = _toConsumableArray(event.target.files);\n              compress = new Compress();\n              compress.compress(files, {\n                size: 1,\n                // the max size in MB, defaults to 2MB\n                quality: 0.5 // the quality of the image, max is 1,\n\n              }).then(function (results) {\n                var img1 = results[0];\n                var file = Compress.convertBase64ToFile(img1.data, img1.ext);\n                SetImgToShow(URL.createObjectURL(file));\n                var reader = new window.FileReader();\n                reader.readAsArrayBuffer(file);\n\n                reader.onloadend = function () {\n                  SetImgBuffer(Buffer(reader.result));\n                };\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function captureFile(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var createPost0 = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _content0, _content;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _content0 = document.getElementById('postTextBox').value;\n              _content = _content0.trim();\n\n              if (!loading) {\n                if (imgBuffer) {\n                  setLoading(true);\n                  uploadToIPFS(_content);\n                } else if (_content) {\n                  setLoading(true);\n                  document.getElementById('postTextBox').value = _content;\n                  createPost(_content, \"\");\n                  setLoading(false);\n                }\n              }\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function createPost0() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var uploadToIPFS = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_content) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              ipfs.add(imgBuffer).then(function (result) {\n                createPost(_content, result.path);\n                setLoading(false);\n              }).catch(function (error) {\n                return console.error(error);\n              });\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function uploadToIPFS(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container text-center text-light my-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, \"Create Post\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    className: \"form-control \",\n    rows: \"8\",\n    maxLength: \"420\",\n    placeholder: \"What's in your mind? type here\",\n    id: \"postTextBox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-12 my-3 text-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    for: \"formFile\",\n    class: \"form-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }, \"Select image (if you want to upload image)\"), /*#__PURE__*/React.createElement(\"input\", {\n    class: \"form-control\",\n    accept: \"image/*\",\n    onChange: captureFile,\n    type: \"file\",\n    id: \"formFile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, imgToShow && /*#__PURE__*/React.createElement(\"img\", {\n    className: \"img-fluid\",\n    style: {\n      height: 200\n    },\n    src: imgToShow,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: createPost0,\n    className: \"btn btn-warning mt-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, loading && /*#__PURE__*/React.createElement(\"span\", {\n    class: \"spinner-grow spinner-grow-sm\",\n    role: \"status\",\n    \"aria-hidden\": \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 33\n    }\n  }), \"Create Post\")));\n}","map":{"version":3,"sources":["/Users/anon/Documents/VSCode/dapper/src/pages/CreatePost.js"],"names":["React","useState","Compress","ipfsClient","require","ipfs","create","host","port","protocol","CreatePost","props","createPost","loading","setLoading","imgToShow","SetImgToShow","imgBuffer","SetImgBuffer","captureFile","event","preventDefault","files","target","compress","size","quality","then","results","img1","file","convertBase64ToFile","data","ext","URL","createObjectURL","reader","window","FileReader","readAsArrayBuffer","onloadend","Buffer","result","createPost0","_content0","document","getElementById","value","_content","trim","uploadToIPFS","add","path","catch","error","console","height"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Compress from 'compress.js';\n\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient.create({ host: \"ipfs.infura.io\", port: 5001, protocol: \"https\" });\n\n\nexport default function CreatePost(props) {\n\n    const { createPost } = props;\n\n    const [loading, setLoading] = useState(false);\n\n    const [imgToShow, SetImgToShow] = useState(\"\");\n    const [imgBuffer, SetImgBuffer] = useState(\"\");\n\n    const captureFile = async (event) => {\n        event.preventDefault()\n        const files = [...event.target.files]\n\n        const compress = new Compress();\n        compress.compress(files, {\n            size: 1, // the max size in MB, defaults to 2MB\n            quality: 0.5 // the quality of the image, max is 1,\n        }).then((results) => {\n            const img1 = results[0]\n            const file = Compress.convertBase64ToFile(img1.data, img1.ext)\n            SetImgToShow(URL.createObjectURL(file))\n\n            const reader = new window.FileReader()\n            reader.readAsArrayBuffer(file)\n            reader.onloadend = () => {\n                SetImgBuffer(Buffer(reader.result));\n            }\n        })\n\n\n\n    }\n\n    const createPost0 = async () => {\n\n        const _content0 = document.getElementById('postTextBox').value;\n        const _content = _content0.trim();\n\n        if (!loading) {\n\n            if (imgBuffer) {\n                setLoading(true)\n                uploadToIPFS(_content);\n            } else if (_content) {\n                setLoading(true)\n                document.getElementById('postTextBox').value = _content;\n                createPost(_content, \"\")\n                setLoading(false)\n            }\n        }\n\n    }\n\n    const uploadToIPFS = async (_content) => {\n        ipfs.add(imgBuffer)\n            .then(result => {\n                createPost(_content, result.path)\n                setLoading(false)\n\n            })\n            .catch(error =>\n                console.error(error)\n            )\n\n    }\n\n    return (\n        <div className=\"container text-center text-light my-5\">\n            <h1 className=\"\">Create Post</h1>\n            <div className=\"mt-4\">\n\n                <div className=\"col-12\">\n\n                    <textarea className=\"form-control \" rows=\"8\" maxLength=\"420\" placeholder=\"What's in your mind? type here\" id=\"postTextBox\">\n                    </textarea>\n                </div>\n\n                <div class=\"col-12 my-3 text-start\">\n                    <label for=\"formFile\" class=\"form-label\">Select image (if you want to upload image)</label>\n                    <input class=\"form-control\" accept=\"image/*\" onChange={captureFile} type=\"file\" id=\"formFile\" />\n                </div>\n                <div className=\"col-12\">\n                    {imgToShow &&\n                        <img className='img-fluid' style={{ height: 200 }} src={imgToShow} alt=\"\" />\n                    }\n                </div>\n                <button onClick={createPost0} className=\"btn btn-warning mt-3\">\n                    {loading && <span class=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span>}\n                    Create Post</button>\n\n            </div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}